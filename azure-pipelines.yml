trigger:
- develop
- master

stages:
- stage: stageBuild
  displayName: 'Build'
  pool:
    name: 'myAgent'
  variables:
    dotnetSdkVersion: '3.1.100'

  jobs:
  - job: jobCompilar
    displayName: 'Compilado'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'
        
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project'
      inputs:
        command: 'build'
        arguments: '--no-restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
      inputs:
        command: 'test'
        arguments: '--no-build /p:CollectCoverage=true /p:CoverletOutputFormat="cobertura%2copencover" /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
        publishTestResults: true
        projects: '**/*.Test.csproj'

    - script: |
        reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
      displayName: 'Crear HTML para reporte de cobertura de código'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publicar reporte de Cobertura de Código'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      condition: succeeded()

- stage: stageDespliegueDevelop
  pool:
    name: 'myAgent'
  displayName: 'Desplegando en develop'
  dependsOn: stageBuild
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))

  jobs:
  - job:

    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          echo 'Hello world'